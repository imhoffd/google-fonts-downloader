import { camelCase, uniqBy } from 'lodash/fp'
import fs from 'node:fs/promises'
import path from 'node:path'

import pkg from '../package.json'

import type Font from './Font'
import isNonNull from './isNonNull'
import type { Options } from './program'

export default async function writeVE(
  fonts: Font[],
  options: Options,
): Promise<void> {
  const fontVariables = new Map(
    uniqBy(font => font.family, fonts).map(
      font => [font.family, camelCase(font.family)] as const,
    ),
  )

  const css =
    `/* generated by ${pkg.name}@${pkg.version} */\n\n` +
    `import { globalFontFace } from '@vanilla-extract/css'\n\n` +
    [...fontVariables.entries()]
      .map(([value, variable]) => `export const ${variable} = '${value}'`)
      .join('\n') +
    '\n\n' +
    fonts
      .flatMap(font => font.srcurls.map(srcurl => [font, srcurl] as const))
      .map(([{ family, style, display, weight, unicodeRange }, { filename }]) =>
        [
          `globalFontFace(${fontVariables.get(family)!}, {`,
          `  fontStyle: '${style}',`,
          `  fontWeight: ${weight},`,
          display ? `  fontDisplay: '${display}',` : null,
          `  src: \`url('${options.urlPrefix ?? ''}${filename}')\`,`,
          `  unicodeRange: '${unicodeRange}',`,
          `})`,
        ]
          .filter(isNonNull)
          .join('\n'),
      )
      .join('\n\n') +
    '\n'

  const filePath = path.join(options.outputDir, 'fonts.ts')
  await fs.writeFile(filePath, css, 'utf8')
  console.log(`wrote '${filePath}'`)
}
